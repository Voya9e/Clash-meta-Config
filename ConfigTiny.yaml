# mihomo (Clash Meta) 懒人配置
# 版本 V1.4.1-231211
# https://gist.github.com/liuran001/5ca84f7def53c70b554d3f765ff86a33
# 作者: 笨蛋ovo (bdovo.cc)
# Telegram: https://t.me/baka_not_baka
# 关注我的 Telegram 频道谢谢喵 https://t.me/s/BDovo_Channel
# 修改自官方示例规则 https://wiki.metacubex.one/example/#meta
# 转载请保留此注释
# 尽量添加了较为详尽的注释，不理解的地方建议对照 虚空终端 (Clash Meta) Docs 进行理解
# 虚空终端 (Clash Meta) Docs 地址: https://wiki.metacubex.one
# 不理解的地方不要乱动，这套规则我自己在用是正常没问题的，搞坏了我不负责

# 推荐机场: 倾城极速 (https://qcjs.pro/)
# 全中转 流媒体解锁 8K秒开无压力

# true 是启用
# false 是禁用

# 分组
pr:
  &pr {
    type: select,
    proxies:
      [
        ⚙️ 自动选择,
        DIRECT,
        🇭🇰 香港,
        🇹🇼 台湾,
        🇰🇷 韩国,
        🇯🇵 日本,
        🇸🇬 新加坡,
        🇺🇸 美国,
        👉🇭🇰 香港,
        👉🇹🇼 台湾,
        👉🇹🇼 韩国,
        👉🇯🇵 日本,
        👉🇸🇬 新加坡,
        👉🇺🇸 美国,
        🌏 其它地区,
      ],
  }
# 延迟检测 URL
p:
  &p {
    type: http,
    interval: 3600,
    health-check:
      {
        enable: true,
        url: https://www.gstatic.com/generate_204,
        interval: 300,
      },
  }

# 订阅名，记得修改成自己的
# 添删订阅在这里和下方订阅链接依葫芦画瓢就行
use: &use
  type: select
  use:
    - A
    - B
#    - 本地配置

# 订阅链接
# 对于订阅来说，path 为选填项，但建议启用
# 本地配置可以只填 path
proxy-providers:
  A:
    <<: *p
    path: ./proxy_provider/A.yaml
    url: ""

  B:
    <<: *p
    path: ./proxy_provider/B.yaml
    url: ""

#  本地配置:
#    <<: *p
#    path: ./proxy_provider/本地配置.yaml

# 规则订阅
rule-providers:
  # anti-AD 广告拦截规则
  # https://github.com/privacy-protection-tools/anti-AD
  # 如果误杀率高请自行更换
  anti-AD:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/anti-AD.yaml
    url: "https://anti-ad.net/clash.yaml"
    interval: 600
  # anti-AD 白名单规则
  anti-AD-white:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/anti-AD-white.yaml
    url: "https://cdn.jsdelivr.net/gh/privacy-protection-tools/dead-horse@master/anti-ad-white-for-clash.yaml"
    interval: 600
  # 程序广告
  #BanProgramAD:
  #  behavior: classical 
  #  type: http
  #  format: yaml
  #  url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Providers/BanProgramAD.yaml"
  #  interval: 86400
  #  path: ./rule_provider/BanProgramAD.yaml
  PayPal:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/PayPal.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/PayPal/PayPal.yaml"
    interval: 600
  OpenAI:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/OpenAI.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/OpenAI/OpenAI.yaml"
    interval: 600
  Gemini:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/Gemini.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Gemini/Gemini.yaml"
    interval: 600
  Copilot:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/Copilot.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Copilot/Copilot.yaml"
    interval: 600
  Claude:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/Claude.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Claude/Claude.yaml"
    interval: 600
  GitHub:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/GitHub.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/GitHub/GitHub.yaml"
    interval: 600
  YouTube:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/YouTube.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/YouTube/YouTube.yaml"
    interval: 600
  Twitch:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/Twitch.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Twitch/Twitch.yaml"
    interval: 600
  OneDrive:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/OneDrive.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/OneDrive/OneDrive.yaml"
    interval: 600
  GAME:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/GAME.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Game/Game.yaml"
    interval: 600
  Apple:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/Apple.yaml
    url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Apple/Apple_Classical.yaml"
    interval: 600
  Microsoft:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/Microsoft.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Microsoft/Microsoft.yaml"
    interval: 600
  Google:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/Google.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Google/Google.yaml"
    interval: 600
  Telegram:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/Telegram.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Telegram/Telegram.yaml"
    interval: 600
  X:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/X.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Twitter/Twitter.yaml"
    interval: 600
  TikTok:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/TikTok.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/TikTok/TikTok.yaml"
    interval: 600
  哔哩哔哩:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/Bilibili.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/BiliBili/BiliBili.yaml"
    interval: 600
  巴哈姆特:
    type: http
    behavior: classical
    format: yaml
    # path可为空(仅限clash.meta 1.15.0以上版本)
    path: ./rule_provider/Bahamut.yaml
    url: "https://cdn.jsdelivr.net/gh/blackmatrix7/ios_rule_script@master/rule/Clash/Bahamut/Bahamut.yaml"
    interval: 600

mode: rule
# ipv6 支持
ipv6: true
log-level: info
# 允许局域网连接
allow-lan: true
# socks5/http 端口
mixed-port: 7890
# Meta 内核特性 https://wiki.metacubex.one/config/general
# 统一延迟
# 更换延迟计算方式,去除握手等额外延迟
unified-delay: true
# TCP 并发
# 同时对所有ip进行连接，返回延迟最低的地址
tcp-concurrent: true
# 外部控制端口
external-controller: :9090

geodata-mode: true

# Geo 数据库下载地址
# 使用 FastGit 代理 (https://fgit.cf)
# 源地址 https://github.com/MetaCubeX/meta-rules-dat
# 可以更换镜像站但不要更换其他数据库，可能导致无法启动
geox-url:
  geoip: "https://hub.gitmirror.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geoip.dat"
  geosite: "https://hub.gitmirror.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/geosite.dat"
  mmdb: "https://hub.gitmirror.com/https://github.com/MetaCubeX/meta-rules-dat/releases/download/latest/country.mmdb"

# 进程匹配模式
# 路由器上请设置为 off
# always 开启，强制匹配所有进程
# strict 默认，由 Clash 判断是否开启
# off 不匹配进程，推荐在路由器上使用此模式
find-process-mode: strict

# 缓解移动设备耗电问题
# https://github.com/vernesong/OpenClash/issues/2614
keep-alive-interval: 1800

# 全局客户端指纹
global-client-fingerprint: random # 随机指纹

# 缓存
profile:
  store-selected: true
  store-fake-ip: true

# 自动同步时间以防止时间不准导致无法正常联网
ntp:
  enable: true
  # 是否同步至系统时间，需要 root/管理员权限
  write-to-system: false
  server: time.apple.com
  port: 123
  interval: 30

# 域名嗅探
sniffer:
  enable: true
  sniff:
    TLS:
      ports: [443, 8443]
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true

# tun 模式
tun:
  enable: false  # enable 'true'
  stack: system  # or 'gvisor'
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  auto-route: true
  auto-detect-interface: true

# dns 设置
# 已配置 ipv6
dns:
  enable: true
  listen: :1053
  ipv6: true
  # 路由器个人建议使用 redir-host 以最佳兼容性
  # 其他设备可以使用 fake-ip
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter:
    - '*'
    - '+.lan'
    - '+.local'
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
    - 114.114.114.114
    - '[2402:4e00::]'
    - '[2400:3200::1]'
  nameserver:
    # 单引号部分为DoT通过“自动选择”节点代理查询，代理后出现。示例：'tls://8.8.4.4#⚙️ 自动选择'
    - 'tls://8.8.4.4#⚙️ 自动选择'
    - 'tls://1.0.0.1#⚙️ 自动选择'
    - 'tls://[2001:4860:4860::8844]#⚙️ 自动选择'
    - 'tls://[2606:4700:4700::1001]#⚙️ 自动选择'
  proxy-server-nameserver:
    - https://doh.pub/dns-query
  nameserver-policy:
    "geosite:cn,private":
      - https://doh.pub/dns-query
      - https://dns.alidns.com/dns-query

# 多入站端口设置
# listeners:
#   - name: hk
#     type: mixed
#     port: 12991
#     proxy: 香港

#   - name: tw
#     type: mixed
#     port: 12992
#     proxy: 台湾

#   - name: sg
#     type: mixed
#     port: 12993
#     proxy: 新加坡

proxies:
  # - name: "WARP"
  #   type: wireguard
  #   server: engage.cloudflareclient.com
  #   port: 2408
  #   ip: "172.16.0.2/32"
  #   ipv6: "2606::1/128"        # 自行替换
  #   private-key: "private-key" # 自行替换
  #   public-key: "public-key"   # 自行替换
  #   udp: true
  #   reserved: "abba"           # 自行替换
  #   mtu: 1280
  #   dialer-proxy: "WARP前置"
  #   remote-dns-resolve: true
  #   dns:
  #     - https://dns.cloudflare.com/dns-query

proxy-groups:
  - { name: ⚙️ 自动选择, <<: *use, tolerance: 2, type: url-test }
  # 手动选择模板，需要在分组添加手动选择
  #- { name: 💪手动选择, <<: *use }
  # 使用 WARP 的用户需要手动 proxies 字段内添加 WARP
  # 这里的 dns 指海外解析 dns 走的节点，一般跟随节点选择即可
  #- { name: dns, <<: *pr }
  # WARP 配置链式出站
  #- { name: WARP前置, <<: *pr, exclude-type: "wireguard" }
  - {
      name: 🎯 墙内直连,
      type: select,
      proxies:
        [
          ⚙️ 自动选择,
          DIRECT,
          🇭🇰 香港,
          🇹🇼 台湾,
          🇰🇷 韩国,
          🇯🇵 日本,
          🇸🇬 新加坡,
          🇺🇸 美国,
          👉🇭🇰 香港,
          👉🇹🇼 台湾,
          👉🇹🇼 韩国,
          👉🇯🇵 日本,
          👉🇸🇬 新加坡,
          👉🇺🇸 美国,
          🌏 其它地区
        ],
    }
  # 漏网之鱼就是所有规则没匹配到的
  # 换言之，漏网之鱼走代理就是绕过中国大陆地址，不走就是 GFWList 模式
  - { name: 🐟 漏网之鱼, <<: *pr }
  - { 
      name: ⛔ 广告拦截, 
      type: select, 
      proxies: 
        [REJECT, DIRECT, ⚙️ 自动选择],
    }
  - { name: 💵 PayPal, <<: *pr }
  - { name: 🤖 AI, <<: *pr }
  - { name: 👀 GitHub, <<: *pr }
  - { name: 📹 YouTube, <<: *pr }
  - { name: ▶️ Twitch, <<: *pr }
  - { name: ☁️ OneDrive, <<: *pr }
  - { name: 🎮 GAME, <<: *pr }
  # Apple 推荐走全局直连
  - { name: 🍎 Apple, <<: *pr }
  - { name: Ⓜ️ Microsoft, <<: *pr }
  - { name: 🌈 Google, <<: *pr }
  - { name: 🛫 Telegram, <<: *pr }
  - { name: 🎵 TikTok, <<: *pr }
  - { name: 🐦 X, <<: *pr }
  # bilibili打开之后会代理全站流量，可能导致部分版权视频反而无法播放或视频播放速度缓慢
  - { name: 📺 哔哩哔哩, <<: *pr}
  - { name: 🕹️ 巴哈姆特, <<: *pr }

  # 分隔,下面是地区分组
  - { name: 🇭🇰 香港, <<: *use, tolerance: 2, type: url-test, filter: "(?i)港|hk|hongkong|hong kong" }
  - { name: 🇹🇼 台湾, <<: *use, tolerance: 2, type: url-test, filter: "(?i)台|tw|taiwan" }
  - { name: 🇰🇷 韩国, <<: *use, tolerance: 2, type: url-test, filter: "KR|Korea|KOR|首尔|韩|韓" }
  - { name: 🇯🇵 日本, <<: *use, tolerance: 2, type: url-test, filter: "(?i)日本|jp|japan" }
  - { name: 🇺🇸 美国, <<: *use, tolerance: 2, type: url-test, filter: "美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States" }
  - { name: 🇸🇬 新加坡, <<: *use, tolerance: 2, type: url-test, filter: "新加坡|狮城|SG|Singapore" }
  - { name: 👉🇭🇰 香港, <<: *use, tolerance: 2, type: select, filter: "(?i)港|hk|hongkong|hong kong" }
  - { name: 👉🇹🇼 台湾, <<: *use, tolerance: 2, type: select, filter: "(?i)台|tw|taiwan" }
  - { name: 👉🇹🇼 韩国, <<: *use, tolerance: 2, type: select, filter: "KR|Korea|KOR|首尔|韩|韓" }
  - { name: 👉🇯🇵 日本, <<: *use, tolerance: 2, type: select, filter: "(?i)日本|jp|japan" }
  - { name: 👉🇺🇸 美国, <<: *use, tolerance: 2, type: select, filter: "美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States" }
  - { name: 👉🇸🇬 新加坡, <<: *use, tolerance: 2, type: select, filter: "新加坡|狮城|SG|Singapore" }
  - {
      name: 🌏 其它地区,
      <<: *use,
      filter: "(?i)^(?!.*(?:🇭🇰|🇯🇵|🇺🇸|🇸🇬|🇨🇳|🇹🇼|🇰🇷|港|hk|HK|Hong Kong|HongKong|hongkong|台|tw|taiwan|新北|彰化|TW|Taiwan|KR|Korea|KOR|首尔|韩|韓|日|jp|japan|日本|川日|东京|大阪|泉日|埼玉|沪日|深日|[^-]日|JP|Japan|新|sg|singapore|新加坡|狮城|SG|Singapore|美|us|unitedstates|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States)).*",
    }



rules:
  # 若需禁用 QUIC 请取消注释 QUIC 两条规则
  # 防止 YouTube 等使用 QUIC 导致速度不佳, 禁用 443 端口 UDP 流量（不包括墙内直连）

# - AND,(AND,(DST-PORT,443),(NETWORK,UDP)),(NOT,((GEOSITE,cn))),REJECT # quic
  - AND,((RULE-SET,anti-AD),(NOT,((RULE-SET,anti-AD-white)))),⛔ 广告拦截 # 感谢 Telegram @nextyahooquery 提供的建议

  - RULE-SET,OpenAI,💵 PayPal
  - RULE-SET,OpenAI,🤖 AI
  - RULE-SET,Gemini,🤖 AI
  - RULE-SET,Copilot,🤖 AI
  - RULE-SET,Claude,🤖 AI
  - RULE-SET,GitHub,👀 GitHub
  - RULE-SET,YouTube,📹 YouTube
  - RULE-SET,Twitch,▶️ Twitch
  - RULE-SET,OneDrive,☁️ OneDrive
  - RULE-SET,GAME,🎮 GAME
  - RULE-SET,Apple,🍎 Apple
  - RULE-SET,Microsoft,Ⓜ️ Microsoft
  - RULE-SET,Google,🌈 Google
  - RULE-SET,Telegram,🛫 Telegram
  - RULE-SET,X,🐦 X
  - RULE-SET,TikTok,🎵 TikTok
  - RULE-SET,哔哩哔哩,📺 哔哩哔哩
  - RULE-SET,巴哈姆特,🕹️ 巴哈姆特

  # OpenAI 跟踪域名
  - DOMAIN-SUFFIX,o33249.ingest.sentry.io,⛔ 广告拦截
  - DOMAIN-SUFFIX,openaicom.imgix.net,⛔ 广告拦截

# - AND,(AND,(DST-PORT,443),(NETWORK,UDP)),(NOT,((GEOIP,CN))),REJECT # quic

  - GEOSITE,CN,🎯 墙内直连
  - GEOIP,CN,🎯 墙内直连
  - GEOSITE,geolocation-!cn,🐟 漏网之鱼
  - MATCH,🐟 漏网之鱼
